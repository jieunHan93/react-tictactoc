{"version":3,"sources":["Game.js","serviceWorker.js","index.js"],"names":["Square","value","onClick","className","Board","squares","renderSquare","i","Game","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","status","setStatus","moves","map","step","move","desc","key","jumpTo","current","winner","calculateWinner","useEffect","isBoardFull","hist","slice","length","concat","handleClick","possibleLines","a","b","c","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.43c6ec60.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Game.css';\r\n\r\nconst Square = ({ value, onClick }) => {\r\n    return (\r\n        <button className=\"square\" onClick={onClick}>\r\n            {value}\r\n        </button>\r\n    );\r\n}\r\n\r\nconst Board = ({squares, onClick}) => {\r\n\r\n    const renderSquare = (i) => {\r\n        return (\r\n            <Square\r\n                value={squares[i]}\r\n                onClick={() => onClick(i)}\r\n            />);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(0)}\r\n                {renderSquare(1)}\r\n                {renderSquare(2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(3)}\r\n                {renderSquare(4)}\r\n                {renderSquare(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(6)}\r\n                {renderSquare(7)}\r\n                {renderSquare(8)}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nconst Game = () => {\r\n    const [history, setHistory] = useState([{ squares: Array(9).fill(null) }]);\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [status, setStatus] = useState(\"\");\r\n\r\n    const handleClick = (i) => {\r\n        const hist = history.slice(0, stepNumber + 1);\r\n        const current = hist[hist.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = xIsNext ? \"X\" : \"O\";\r\n\r\n        setHistory(hist.concat([{ squares }]));\r\n        setStepNumber(hist.length);\r\n        setXIsNext(!xIsNext);\r\n    }\r\n\r\n    const jumpTo = (step) => {\r\n        setStepNumber(step);\r\n        setXIsNext((step % 2) === 0);\r\n    }\r\n\r\n\r\n    const moves = history.map((step, move) => {\r\n        const desc = move ?\r\n            'Go to move #' + move :\r\n            'Go to game start';\r\n        return (\r\n            <span key={move}>\r\n                <button onClick={() => jumpTo(move)}>{desc}</button>\r\n            </span>\r\n        );\r\n    });\r\n\r\n\r\n    let current = history[stepNumber];\r\n    let winner = calculateWinner(current.squares);\r\n    useEffect(() => {\r\n        current = history[stepNumber];\r\n        winner = calculateWinner(current.squares);\r\n        if (winner) {\r\n            setStatus(\"Winner: \" + winner);\r\n        } else if (isBoardFull(current.squares)) {\r\n            setStatus(\"Draw!!\");\r\n        } else {\r\n            setStatus(\"Next player: \" + (xIsNext ? \"X\" : \"O\"));\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n                <Board\r\n                    squares={current.squares}\r\n                    onClick={i => handleClick(i)}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <div>{status}</div>\r\n                <div>{moves}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Game;\r\n\r\nconst calculateWinner = (squares) => {\r\n    const possibleLines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n    // go over all possibly winning lines and check if they consist of only X's/only O's\r\n    for (let i = 0; i < possibleLines.length; i++) {\r\n        const [a, b, c] = possibleLines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nconst isBoardFull = (squares) => {\r\n    for (let i = 0; i < squares.length; i++) {\r\n        if (squares[i] == null) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}